Quando gostaria de usar um repositório remoto em vez de manter o trabalho local?

Para compartilhar meu código ou projeto com outras pessoas, para acessar meu código apartir de outros computadores, deixar
meu código é histórico do repositório na nuvem é uma excelente forma de guardar toda a história de um projeto independente do
computador e tempo q esteja desenvolvendo o projeto.

Descreva as diferenças entre bifurcações, clones e branches. Quando você usaria um e não os outros?

Uma bifurcação é relativa a um repositório github, e apenas cria no meu usuário uma cópia do projeto com a qual eu posso interagir, colocando meus
próprios commits, após minhas alterações. Esse repositório bifurcado fica ligado ao original, porém sem fazer alterações.

Um clone apenas clona um reposótirio git em um repositorio local no meu computador. muito útil quando vou fazer alterações em um projeto

Uma branch apenas cria uma estrutura segura para que possa testar e realizar alterações. Branch é um local no meu próprio repositório onde eu posso
realizar alterações e commits.

Qual é o benefício de ter uma cópia do último estado conhecido do remoto armazenado localmente?

o benefício é que antes de dar um push das minhas alterações posso fazer um git fetch e pegar a ultima versão do meu repositório remoto,
verificar com git status e git log quais as diferenças e decidir em fazer o merge por mim mesmo. Ou, deixar que o próprio git pull faça 
tudo isso por mim, bastando apenas eu trabalhar no conflito. Essa informação também será utilizada para saber se o meu repositório esta
atrás, a frente ou fora de sincronia com meu remoto.

Como você colaboraria sem usar Git ou GitHub? O que seria mais fácil e mais difícil?

Bom, colaborar sem git ou github exigiria primeiro descobrir o link e os arquivos de um projeto a qual me sentisse útil. após, teria que
realizar a alteração e enviar emails e esperar que alguém visse e achasse minhas alterações importantes. Git e Github tornaram isso 
muito fácil e prático.


Quando você gostaria de fazer alterações em um branch separado, e não diretamente no master? Quais são os benefícios de cada abordagem?


Normalmente abordo minhas alterações em um branch separado quando necessito criar uma nova funcionalidade onde ainda pode levar um tempo, ou quando quero implementar alguma coisa que poderá quebrar meu código master, então, uso branchs. O benefício que sinto é a segurança de voltar atrás,
e usar os diffs...

